! Configuration File for keepalived

#全局定义块, 以下模版不能省略
global_defs {
    # 如有故障, 发邮件的地址.
    notification_email {        # 收件人
        acassen@firewall.loc
        failover@firewall.loc
        sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc    # 发件人
   smtp_server 192.168.200.1                                # smtp 服务器

    smtp_connect_timeout 30                                 # 邮件服务链接超时的最长时间
    router_id LVS_DEVEL                                     # 当前节点名称
}

vrrp_sync_group VG_1 {
    group {
        VI_1
        VI_2
   }
}

vrrp_script chk_nginx {
     script "killall -0 nginx"     # 检测nginx服务是否存在
     interval 1                    # 时间间隔1秒检测一次
     weight -2                     # 当nginx不存在将当前权重减2
}

vrrp_instance VI_1 {        # vrrp 服务名
    state MASTER            # 只有MASTER和BACKUP 两种状态, 都必须大写.
    interface eth0          # 进行通信的网卡

    # 同一个vrrp实例的唯一标识. 即同一个 vrrp_stance , MASTER 和 BACKUP 的 virtual_router_id 是一致的. 在整个vrrp内也唯一.
    virtual_router_id 51

    priority 100            # 权重, 数值越大, 权重越大. MASTER大于SLAVE
    advert_int 1            # MASTER 和 SLAVE 负载均衡器之间同步检查的时间间隔. 单位是: 秒

    authentication {        # MASTER和SLAVE的认证方式
        auth_type PASS
        auth_pass 1111
    }

    virtual_ipaddress {     # 设置 vip 地址, 可多个, 一行一个
        192.168.1.200
        192.168.1.300
    }

    track_script {          # 引用上面定义的脚本
        chk_nginx
    }

    notify_master /path/to/to_master.sh     # 切换到主状态执行的通知
    notify_backup /path_to/to_backup.sh     # 切换到备状态执行的通知
    notify_fault "/path/fault.sh VG_1"      # 故障时执行的通知(如果有空格记得加引号)
}

virtual_server 192.168.200.100 443 {    # 从服务器 ip and port (vip)
    delay_loop 6                        # 服务健康检查周期, 6秒
    lb_algo wlc                         # 负载均衡调度算法rr|wrr|lc|wlc|sh|dh|lblc
    lb_kind NAT                         # 负载均衡转发规则NAT|DR|TUN|FULL-NAT
    nat_mask 255.255.255.0

    persistence_timeout 50              # 会话保持时间, 如果是动态服务, 建议开启. 默认50秒
    protocol TCP                        # 指定转发协议类型, 有TCP和UDP两种
    sorry_server 192.168.200.100 443    # 如果所有 rs 都出现故障了, 返回此信息

    # 后端 rs 真实 ip
    real_server 192.168.200.1 443 {
        weight 1                    # 权重, 数值越大, 权重越高. 分发的可能越大
        notify_up /path/up.sh       # 服务器up时执行的通知
        notify_down /path/down.sh   # 服务器down时执行的通知

        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK
        # 定义健康状态检测:
        # HTTP_GET  : 如果是HTTPS使用此方法检测的;
        # SSL_GET   : 如果是ssh使用此方式检测;
        # TCP_CHECK : 检测TCP协议的服务器健康状况;
        # SMTP_CHECK: 用来专门检测SMTP服务器;
        # MISC_CHECK: 其他检测机制很少使用一般只使用前三种检测方法;
        ############ HTTP_GET | SSL_GET #############
        SSL_GET {
                url {                                           # url字段
                    path /urltest/test.html                     # 指定检查哪个url
                    digest ff20ad2481f97b1754ef3e12ecd3a9cc     # 获取检测那个url的校验码
                    # /usr/local/keepalived/bin/genhash -s 192.168.1.14 -p 80 -u /urltest/test.html
                    status_code 200             # 状态码( digest 和 status_code 可以独立存在)
                }
                url {
                    path /mrtg/
                    digest 9b3a0c85a887a256d6939da88aabd8cd
                }
                connect_timeout 3       # 超时时间
                nb_get_retry 3          # 重试次数
                delay_before_retry 3    # 重试之前等待时间
        }
    }

    real_server 192.168.200.2 443 {
        weight 1
        HTTP_GET {
                url {
                    path /testurl/test.jsp
                    digest 640205b7b0fc66c1ea91c463fac6334d
                }
                url {
                    path /testurl2/test.jsp
                    digest 640205b7b0fc66c1ea91c463fac6334d
                }
                connect_timeout 3
                nb_get_retry 3
                delay_before_retry 3
        }
    }

    real_server 192.168.200.3 443 {
        weight 1
        TCP_CHECK {
            connect_port 443        #连接哪个端口
            bindto 192.168.200.3    #连接哪个地址
            connect_timeout 3       #超时时间是多少
        }
    }
}
