#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global                                          # 全局配置
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2                # 配置日志 [ err warning info debug ]

    chroot      /var/lib/haproxy                # 目录
    pidfile     /var/run/haproxy.pid            # pid目录
    maxconn     4000                            # 最大连接数
    user        haproxy                         # 所属运行的用户
    group       haproxy                         # 所属运行的组
    daemon                                      # 后代运行
    nbproc      1                               # 进程数量

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults                                        # 默认全局配置
    mode                    http                # 代理模式 [ http tcp health ] ( tcp是4层,http是7层,health只会返回OK )
    log                     global              # 使用全局配置
    option                  httplog             # 日志类别http日志格式,默认不记录
    option                  dontlognull         # 不记录健康检查日志
    option http-server-close                    # 每次请求完毕主动关闭http通道
    option forwardfor       except 127.0.0.0/8  # 如果后端需要获取客户端ip可以从http包头获取
    option                  redispatch          # 开启cookie时如果后端挂了,开启此选项可以讲请求重定向到正常提供服务的后端主机
    retries                 3                   # 定义后端连接失败次数,超过此次数则认为后端主机不可用
    timeout http-request    10s                 # http请求超时时间
    timeout queue           1m                  # 请求在队列里的超时时间
    timeout connect         10s                 # 连接超时时间
    timeout client          1m                  # 客户端超时时间
    timeout server          1m                  # 服务器超时时间
    timeout http-keep-alive 10s                 # http-keep-alive超时时间
    timeout check           10s                 # 检测超时时间
    maxconn                 3000                # 每个进程的最大连接数

listen admin_stats
    bind 0.0.0.0:1080                           # 监听端口
    mode http                                   # http的7层模式
    log 127.0.0.1 local0 err                    # 日志设置,[err warning info debug]
    stats refresh 30s                           # 统计页面自动刷新时间
    stats uri /haproxy?stats                    # 统计页面url
    stats realm  Gemini\ Haproxy                # 统计页面密码框上提示文本
    stats auth admin:admin                      # 统计页面用户名和密码设置
    stats auth admin1:admin1
    stats hide-version                          # 隐藏统计页面上HAProxy的版本信息

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main *:5000                                   # 监听地址
    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_reg       -i ^/static ^/images ^/javascript ^/stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js
    acl php_web          url_reg        /*.php$
    acl static_web       url_reg        /*.(css|jpg|png|jpeg|js|gif)$
    # acl: 
    #   -i          忽略大小写
    #   path_beg    url目录
    #   path_reg    正则
    #   path_end    url结尾
    #   url_beg     url开头
    #   url_reg     正则
    #   url_end     url结尾
    use_backend          static         if url_static   # 如果匹配url_static则通过static来转发
    default_backend      app                            # 默认的请求通过app转发

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static                                  # 定义后端服务器
    balance     roundrobin                      # 负载均衡算法[ roundrobin 加权轮询|leastconn 长连接|...8种算法 ]
    server      static 127.0.0.1:4331 check
    # server参数:
    #   backup          备份服务器,一般不启用
    #   check           开启健康检查
    #   inter 2000      健康检查间隔时间,单位毫秒
    #   rise  2         从不可用状态转为正常状态需要检查的次数
    #   fall  2         从正常状态转为不可用状态需要检查的次数
    #   cookie <value>  设定cookie值,在连接入站时检测的cookie值为此值,此后所有此值的连接都被转发到此主机
    #   maxconn 100     此主机接受的最大连接数,高于此值的连接将被放进队列
    #   maxqueue 50     队列最大长度
    #   redir http://baidu.com/s=aaaa
    #                   重定向,将发往此主机的GET和HEAD请求以302的状态码响应
    #   werght 1        权重,(0-256),0表示不参与负载均衡

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check

