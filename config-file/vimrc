""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 系统设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 设置默认shell
set shell=bash

" 打开文件类型自动检测功能
filetype on
filetype plugin indent on

"打开文件类型检测, 加了这句才可以用智能补全
set completeopt=longest,menu

" 自动补全
":inoremap ( ()<ESC>i
":inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {<CR>}<ESC>O
":inoremap } <c-r>=ClosePair('}')<CR>
":inoremap [ []<ESC>i
":inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap " ""<ESC>i
":inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

" 设置缩进
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set cindent
if &term=="xterm"
    set t_Co=8
    set t_Sb=^[[4%dm
    set t_Sf=^[[3%dm
endif

" 可以在buffer的任何地方使用鼠标
" set mouse=a
" set selection=exclusive
" set selectmode=mouse,key

" 关闭 vi 兼容模式
set nocompatible

" 显示输入的命令
set showcmd

" 允许折叠
set foldenable

" 标记折叠
"set foldmethod=marker

" 依赖缩进折叠
set foldmethod=indent

" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0

" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-

" 历史记录数
set history=200

"搜索忽略大小写
set ignorecase

"搜索逐字符高亮
set hlsearch
set incsearch

"行内替换
set gdefault

" 自动保存
set autowrite

" 设置当文件被改动时自动载入
set autoread

" 允许插件
filetype plugin on

" 从不备份
set nobackup

" 去掉输入错误的提示声音
set noeb

" 在处理未保存或只读文件的时候,弹出确认
set confirm

" 在行和段开始处使用制表符
"set smarttab

" 为特定文件类型载入相关缩进文件
filetype indent on

" 保存全局变量
set viminfo+=!

" 字符间插入的像素行数目
set linespace=0

" 增强模式中的命令行自动完成操作
set wildmenu



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 语言设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"设置编码
set encoding=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,chinese

"语言设置
set langmenu=zh_CN.UTF-8

"中文
set helplang=cn

" 显示中文帮助
if version >= 603
    set helplang=cn
    set encoding=utf-8
endif



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 设置字体
set guifont=Courier_New:h10:cANSI

" 设置语法高亮
syntax enable
syntax on

" 高亮显示匹配的括号
set showmatch

" 显示行号和标尺
set number
set ruler
set rulerformat=%15(%c%V\ %p%%%)

" 高亮显示匹配的括号
set showmatch

" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1

" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\

" 突出显示当前行
set cursorline

" 设置背景主题(注意需要自己下载)
"color asmanian2

"背景使用黑色
set background=dark

" 设置配色方案
"colorscheme torte



""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 窗口设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 设定窗口位置
"winpos 5 5

" 设定窗口大小
"set lines=40 columns=155

" 关掉智能补全时的预览窗口
set completeopt=longest,menu

" 命令行(在状态行下)的高度,默认为1,这里是2
set cmdheight=2

" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3

" 隐藏工具栏
"set guioptions-=T

" 隐藏菜单栏
"set guioptions-=m

" 启动显示状态行(1),总是显示状态行(2)
set laststatus=2

" 状态行显示的内容
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%Y-%m-%d\ %H:%M\")}
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 新建.sh,.py文件，自动插入文件头
autocmd BufNewFile *.py,*.sh exec ":call SetTitle()"

" 定义函数SetTitle，自动插入文件头
func SetTitle()
    " 如果文件类型为.sh文件
    if &filetype == 'python'
		call setline(1, "\#!/usr/bin/env python")
        call setline(2, "\# -*- coding: utf-8 -*-")
        call setline(3, "\# 1un")
        call setline(4, "\# ".strftime("%F"))
		call setline(5, "")
    endif
    if &filetype == 'sh'
		call setline(1, "\#!/bin/bash")
        call append(line("."), "\# 1un")
        call append(line(".")+1, "\# ".strftime("%F"))
        call append(line(".")+2, "")
    endif
    " 新建文件后，自动定位到文件末尾
    autocmd BufNewFile * normal G
endfunc



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"键盘命令
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <leader>w :w!<cr>
nmap <leader>f :find<cr>

" 映射全选+复制 ctrl+a
map <C-A> ggVGY
map! <C-A> <Esc>ggVGY
map <F12> gg=G

" 选中状态下 Ctrl+c 复制
vmap <C-c> "+y

" 去空行
nnoremap <F2> :g/^\s*$/d<CR>

" 比较文件
nnoremap <C-F2> :vert diffsplit

" 新建标签
map <M-F2> :tabnew<CR>

" 列出当前目录文件
map <F3> :tabnew .<CR>

" 打开树状文件目录
map <C-F3> \be

" C，C++ 按F5编译运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'python'
		exec "!python %"
    elseif &filetype == 'sh'
        :!sh %
    endif
endfunc

"C,C++的调试
"map <F8> :call Rungdb()<CR>
"func! Rungdb()
"    exec "w"
"    exec "!g++ % -g -o %<"
"    exec "!gdb ./%<"
"endfunc


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim 配置主要有以下特点:
" 1. 自动插入文件头, 新建python & shell源文件时自动插入表头: 作者,建立时间
" 2. 映射 "Ctrl+A" 为全选并复制快捷键, 方便复制代码
" 3. 按 "F2" 可以直接消除代码中的空行
" 4. "F3" 可列出当前目录文件, 打开树状文件目录
" 5. 支持鼠标选择, 方向键移动
" 6. 代码高亮, 自动缩进, 显示行号, 显示状态行
" 7. 按 "Ctrl + P" 可自动补全
" 8. [] & {} & () & "" & ' ' 等都自动补全
" 9. 按 "F5" 可以直接编译并执行 C & C++ & java 代码以及执行shell脚本
" 10.按 "F8" 可进行 C & C++ 代码的调试
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
